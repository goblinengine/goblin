diff a/platform/osx/os_osx.mm b/platform/osx/os_osx.mm	(rejected hunks)
@@ -389,6 +389,14 @@ static NSCursor *cursorFromSelector(SEL selector, SEL fallback = nil) {
 		CGLEnable((CGLContextObj)[OS_OSX::singleton->context CGLContextObj], kCGLCESurfaceBackingSize);
 	}
 
+	if (OS_OSX::singleton->main_loop) {
+		Main::force_redraw();
+		//Event retrieval blocks until resize is over. Call Main::iteration() directly.
+		if (!Main::is_iterating()) { //avoid cyclic loop
+			Main::iteration();
+		}
+	}
+
 	/*
 	_GodotInputFramebufferSize(window, fbRect.size.width, fbRect.size.height);
 	_GodotInputWindowSize(window, contentRect.size.width, contentRect.size.height);
@@ -1674,11 +1682,6 @@ Error OS_OSX::initialize(const VideoMode &p_desired, int p_video_driver, int p_a
 	CGLSetParameter((CGLContextObj)[context CGLContextObj], kCGLCPSurfaceBackingSize, &dim[0]);
 	CGLEnable((CGLContextObj)[context CGLContextObj], kCGLCESurfaceBackingSize);
 
-	if (get_render_thread_mode() != RENDER_THREAD_UNSAFE) {
-		CGLError err = CGLEnable((CGLContextObj)[context CGLContextObj], kCGLCEMPEngine); // Enable multithreading.
-		ERR_FAIL_COND_V(err != kCGLNoError, ERR_UNAVAILABLE);
-	}
-
 	set_use_vsync(p_desired.use_vsync);
 
 	if (!is_no_window_mode_enabled()) {
@@ -3292,25 +3295,11 @@ void OS_OSX::force_process_input() {
 	joypad_osx->process_joypads();
 }
 
-void OS_OSX::pre_wait_observer_cb(CFRunLoopObserverRef p_observer, CFRunLoopActivity p_activiy, void *p_context) {
-	// Prevent main loop from sleeping and redraw window during resize / modal popups.
-
-	if (get_singleton()->get_main_loop()) {
-		Main::force_redraw();
-		if (!Main::is_iterating()) { // Avoid cyclic loop.
-			Main::iteration();
-		}
-	}
-
-	CFRunLoopWakeUp(CFRunLoopGetCurrent()); // Prevent main loop from sleeping.
-}
-
 void OS_OSX::run() {
 	force_quit = false;
 
-	if (!main_loop) {
+	if (!main_loop)
 		return;
-	}
 
 	main_loop->init();
 
@@ -3319,8 +3308,10 @@ void OS_OSX::run() {
 		set_window_fullscreen(true);
 	}
 
-	CFRunLoopObserverRef pre_wait_observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopBeforeWaiting, true, 0, &pre_wait_observer_cb, nullptr);
-	CFRunLoopAddObserver(CFRunLoopGetCurrent(), pre_wait_observer, kCFRunLoopCommonModes);
+	//uint64_t last_ticks=get_ticks_usec();
+
+	//int frames=0;
+	//uint64_t frame=0;
 
 	bool quit = false;
 
@@ -3337,9 +3328,6 @@ void OS_OSX::run() {
 		}
 	};
 
-	CFRunLoopRemoveObserver(CFRunLoopGetCurrent(), pre_wait_observer, kCFRunLoopCommonModes);
-	CFRelease(pre_wait_observer);
-
 	main_loop->finish();
 }
 
