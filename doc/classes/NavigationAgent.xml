<?xml version="1.0" encoding="UTF-8" ?>
<class name="NavigationAgent" inherits="Node" version="3.5">
	<brief_description>
		3D agent used in navigation for collision avoidance.
	</brief_description>
	<description>
		3D agent that is used in navigation to reach a location while avoiding static and dynamic obstacles. The dynamic obstacles are avoided using RVO (Reciprocal Velocity Obstacles) collision avoidance. The agent needs navigation data to work correctly. This can be done by having the agent as a child of a [Navigation] node, or using [method set_navigation]. [NavigationAgent] is physics safe.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="distance_to_target" qualifiers="const">
			<return type="float" />
			<description>
				Returns the distance to the target location, using the agent's global position. The user must set the target location with [method set_target_location] in order for this to be accurate.
			</description>
		</method>
		<method name="get_final_location">
			<return type="Vector3" />
			<description>
				Returns the reachable final location in global coordinates. This can change if the navigation path is altered in any way. Because of this, it would be best to check this each frame.
			</description>
		</method>
		<method name="get_nav_path" qualifiers="const">
			<return type="PoolVector3Array" />
			<description>
				Returns the path from start to finish in global coordinates.
			</description>
		</method>
		<method name="get_nav_path_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns which index the agent is currently on in the navigation path's [PoolVector3Array].
			</description>
		</method>
		<method name="get_navigation" qualifiers="const">
			<return type="Node" />
			<description>
				Returns the [Navigation] node that the agent is using for its navigation system.
			</description>
		</method>
		<method name="get_next_location">
			<return type="Vector3" />
			<description>
				Returns a [Vector3] in global coordinates, that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the origin of the agent's parent.
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the object's [RID].
			</description>
		</method>
		<method name="get_target_location" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the user-defined target location (set with [method set_target_location]).
			</description>
		</method>
		<method name="is_navigation_finished">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the navigation path's final location has been reached.
			</description>
		</method>
		<method name="is_target_reachable">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the target location is reachable. The target location is set using [method set_target_location].
			</description>
		</method>
		<method name="is_target_reached" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the target location is reached. The target location is set using [method set_target_location]. It may not always be possible to reach the target location. It should always be possible to reach the final location though. See [method get_final_location].
			</description>
		</method>
		<method name="set_navigation">
			<return type="void" />
			<argument index="0" name="navigation" type="Node" />
			<description>
				Sets the [Navigation] node used by the agent. Useful when you don't want to make the agent a child of a [Navigation] node.
			</description>
		</method>
		<method name="set_target_location">
			<return type="void" />
			<argument index="0" name="location" type="Vector3" />
			<description>
				Sets the user desired final location. This will clear the current navigation path.
			</description>
		</method>
		<method name="set_velocity">
			<return type="void" />
			<argument index="0" name="velocity" type="Vector3" />
			<description>
				Sends the passed in velocity to the collision avoidance algorithm. It will adjust the velocity to avoid collisions. Once the adjustment to the velocity is complete, it will emit the [signal velocity_computed] signal.
			</description>
		</method>
	</methods>
	<members>
		<member name="agent_height_offset" type="float" setter="set_agent_height_offset" getter="get_agent_height_offset" default="0.0">
			The agent height offset to match the navigation mesh height.
		</member>
		<member name="ignore_y" type="bool" setter="set_ignore_y" getter="get_ignore_y" default="true">
			Ignores collisions on the Y axis. Must be [code]true[/code] to move on a horizontal plane.
		</member>
		<member name="max_neighbors" type="int" setter="set_max_neighbors" getter="get_max_neighbors" default="10">
			The maximum number of neighbors for the agent to consider.
		</member>
		<member name="max_speed" type="float" setter="set_max_speed" getter="get_max_speed" default="10.0">
			The maximum speed that an agent can move.
		</member>
		<member name="neighbor_dist" type="float" setter="set_neighbor_dist" getter="get_neighbor_dist" default="50.0">
			The distance to search for other agents.
		</member>
		<member name="path_max_distance" type="float" setter="set_path_max_distance" getter="get_path_max_distance" default="3.0">
			The maximum distance the agent is allowed away from the ideal path to the final location. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path.
		</member>
		<member name="radius" type="float" setter="set_radius" getter="get_radius" default="1.0">
			The radius of the agent.
		</member>
		<member name="target_desired_distance" type="float" setter="set_target_desired_distance" getter="get_target_desired_distance" default="1.0">
			The distance threshold before a target is considered to be reached. This will allow an agent to not have to hit a point on the path exactly, but in the area.
		</member>
		<member name="time_horizon" type="float" setter="set_time_horizon" getter="get_time_horizon" default="5.0">
			The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but the less freedom in choosing its velocities. Must be positive.
		</member>
	</members>
	<signals>
		<signal name="navigation_finished">
			<description>
				Notifies when the final location is reached.
			</description>
		</signal>
		<signal name="path_changed">
			<description>
				Notifies when the navigation path changes. This can be triggered by the navigation system or by the user changing the path.
			</description>
		</signal>
		<signal name="target_reached">
			<description>
				Notifies when the player-defined target, set with [method set_target_location], is reached.
			</description>
		</signal>
		<signal name="velocity_computed">
			<argument index="0" name="safe_velocity" type="Vector3" />
			<description>
				Notifies when the collision avoidance velocity is calculated after a call to [method set_velocity].
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
