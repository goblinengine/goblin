<?xml version="1.0" encoding="UTF-8" ?>
<class name="Rand" inherits="RandomNumberGenerator" version="3.5">
	<brief_description>
		A singleton class for generating random values.
	</brief_description>
	<description>
		Rand builds on [RandomNumberGenerator] to provide additional functionality. Rand is a singleton and t herefore it can be called directly without an instance and as a singleton it appears to be somewhat faster than [RandomNumberGenerator] as it avoid much of the GDScript overhead.
		Rand is randomized by default at editor/game restart but since it inherits from [RandomNumberGenerator] you can manually set the seed and state from saved data to make it completely predictable. Seeding changes state so always set seed first and state second.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="i">
			<return type="int" />
			<argument index="0" name="from" type="int" />
			<argument index="1" name="to" type="int" />
			<description>
				Returns a random integer value between from and to.
			</description>
		</method>
		<method name="f">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<description>
				Returns a random float value between from and to.
			</description>
		</method>
		<method name="ia">
			<return type="int" />
			<argument index="0" name="from" type="int" />
			<argument index="1" name="to" type="int" />
			<argument index="2" name="algorithm" type="int" />
			<description>
				Returns a random integer value between from and to using a specific algorithm.
			</description>
		</method>
		<method name="choice">
			<return type="Variant" />
			<argument index="0" name="from" type="Variant" />
			<description>
				Returns a random element from a container or indexable sequence, such as [Array], [Dictionary], [String]. If container is empty, prints an error and returns [code]null[/code].
			</description>
		</method>
			<method name="choices">
			<return type="Variant" />
			<argument index="0" name="from" type="Variant" />
			<argument index="1" name="count" type="int" default="1" />
			<argument index="2" name="weights" type="Array" default="null" />
			<description>
				Returns random elements from an [Array] based on count and weights. This is somewhat similar to [method choice] but it allows you to specify weights for each element. Weights must be an [Array] of positive integers and of the same size as the original [Array]. If no weights are specified, all elements are equally likely.
			</description>
		</method>
		<method name="color">
			<return type="Color" />
			<description>
				Returns a random [Color].
			</description>
		</method>
		<method name="shuffle">
			<return type="void" />
			<argument index="0" name="array" type="Array" />
			<description>
				Shuffles the array such that the items will have a random order. By default, this method uses the global random number generator in [RandomNumberGenerator] singletons, but unlike in [method Array.shuffle], local instances of [RandomNumberGenerator].
			</description>
		</method>
		<method name="roll">
			<return type="Array" />
			<argument index="0" name="count" type="int" />
			<argument index="1" name="faces" type="int" />
			<description>
				Simulates a random roll of dice using [parameter count] and [parameter faces].
				[b]Note:[/b] The result is a Dictionary that contains the [code]sum[/code] and all the [code]rolls[/code]. 
				[codeblock]
					{
						"sum": int,
						"rolls": []
					}
				[/codeblock]
				[b]Note:[/b] The maximum dice count is 1 - 100 and maximum dice faces are 2 - 144.
				[codeblock]
					Rand.roll(2, 6) # return a random 2d6 roll 
					Rand.roll(4, 8).sum # return the sum of a 4d8 roll
				[/codeblock]
			</description>
		</method>
		<method name="roll_notation">
			<return type="Array" />
			<argument index="0" name="dice_notation" type="String" />
			<description>
				Simulates a random roll of dice using [url=https://en.wikipedia.org/wiki/Dice_notation]dice notation[/url]. The function is meant to fail silently and will output an empty [Dictionary] on failure. It will also work with any parameters even if they don't make sense such as rolling 2 dice and dropping 100 and will only output what it can with the information given. Check your dice notation if you are not getting the results you expected.
				Dice notation formula: [code]Rx(AdXU!EkdlhYxC+-B)[/code]
				[codeblock]		
				Rx: repeat everything R times (max 100 times)
				AdX: roll A dice with X faces (max 100 dice with 144 faces). If A is omitted, it defaults to 1. X is and can be a number, a % symbol which will be converted to 100 (percentile dice) or an F which will be output -1 0 1 and will ignore explode or unique (fudge dice).
				U: unique rolls if possible (exploded dice don't have to be unique)
				!E: explode (reroll and add to sum) when E is rolled (explosion happens after unique but before keeping/dropping and exploded rolls go in their own array)
				kdlhY: (k)eep/(d)drop (l)ow/(h)igh Y number of dice (can only be used once after unique and exploded rolls don't get dropped)
				xC: multiply sum by C
				+-B: add or subtract B from sum
				[/codeblock]
				[b]Note:[/b] The result is a Dictionary that contains [code]notation[/code], [code]sum[/code], [code]rolls[/code], [code]dropped_rolls[/code], [code]exploded_rolls[/code] and [code]explodes[/code] (tracks how many times the roll exploded). Explodes or keeps/drops only show in the result when those features are used. 
				[codeblock]
					{
						"dropped_rolls": [], # list of dropped rolls (are not counted in the sum)
						"exploded_rolls": [], # list of exploded rolls (are counted in the sum)
						"explodes": int, # number of times the dice exploded
						"notation": String, # initial dice notation
						"rolls": [] # list of rolled dice
						"sum": int, # sum exploded and non dropped rolls
					}
				[/codeblock]
				[b]Note:[/b] The maximum dice count is 1 - 100 and maximum dice faces are 2 - 144. Also maximum repeats is set to 100.
				[codeblock]
					Rand.roll_notation("4x(2d6!1)") # roll 2 dice with 6 faces explode on 1 repeat everything 4 times and sum it all together.
					Rand.roll_notation("2d6") # 2d6 roll 2 dice with 6 faces
					Rand.roll_notation("5x(3d10+1)") #roll 3 dice with 10 faces add 1 to the total sum then repeat everything 5 times and sum it all together
					Rand.roll_notation("4d8dh2") # roll 4 dice with 8 faces discard 2 highest rolls
				[/codeblock]	
			</description>
		</method>
		<method name="decision">
			<return type="bool" />
			<argument index="0" name="probability" type="float" />
			<description>
				Returns a boolean based on a given [code]probability[/code] value in the range of [code]0.0..1.0[/code]. The higher the probability value the higher the chance of this returning [code]true[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="seed" type="int" setter="set_seed" getter="get_seed" default="0">
			Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.
		</member>
		<member name="state" type="int" setter="set_state" getter="get_state" default="0">
			The current state of the random number generator. Save and restore this property to restore the generator to a previous state:
		</member>
	</members>
	<constants>
	</constants>
</class>
