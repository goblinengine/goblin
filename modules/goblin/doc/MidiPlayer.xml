<?xml version="1.0" encoding="UTF-8" ?>
<class name="MidiPlayer" inherits="AudioStreamPlayer" version="3.5">
	<brief_description>
		[b]A MIDI player class.[/b]
	</brief_description>
	<description>
		The MidiPlayer class can play MIDI files. It does this using a collection of sounds called SoundFont which was originally invented in the early 1990s by Creative Labs for their SoundBlaser AWE32 sound card. The MIDI specification is even older from 1983.
		Although these technologies old, they are still used today in music industry because they are so incredibly handy. MIDI specifically has seen continous with minimal changes since since inception. 
		In order to use this class, the node should be added to the scene tree. Create a new [AudioStreamGenerator] via inspector in [member AudioStreamPlayer.stream] and then load a SoundFont using [method load_soundfont] and the MIDI file using [method load_midi]. For instance:
		[codeblock]
		func _ready():
		    $MidiPlayer.load_midi("res://moonlight.mid")
		    $MidiPlayer.load_soundfont("res://piano.sf2")
		    $MidiPlayer.play()
		[/codeblock]
		You can find MIDI music and General Midi SoundFonts online. Here are just a few completely free ones that you might want to look for: [code]ChoriumRevA.sf2[/code], [code]WeedsGM3.sf2[/code], [code]SGM-V2.01FluidR3_GM.sf2[/code], [code][TimGM6mb.sf2[/code] (close to the original Sound Blaster sound), [code]Timbres Of Heaven GM_GS_XG_SFX V 3.0 Final.sf2[/code] (very high quality). 
		[b]List of keywords:[/b]
		[code]channel:[/code] Audio channels (or tracks) are a kind of an audio layer that allows various instruments to play on top of each other. Channel 10 is always set to Drums and is handled differently. Channel is equivalent to a modern concept of track in a modern DAW. The number of channels depends on implementation but commonly you have 16 maximum channels.
		[code]preset:[/code] The preset is the instrument (Piano, Harpsichord, etc) which is organized in sound banks. Drums (usually set to channel 10) are special in that each key has a unique sample (bank) and the entire instrument is handled by a drum program.
		[code]bank:[/code] A soundfont bank contains the actual audio sample in PCM format. A bank is mapped to a section of the keyboard. The audio is not simply scaled to different pitches but is actually sampled at various pitches from a real instrument then pitched only to a small range of keys. This ensures a more natural sound.
		[code]note:[/code] This is the note to play (also called key). It must be a value between 0 and 127. A value of 60 is middle C (C4).
		[code]volume:[/code] Also called velocity. A value of 0.0 means no sound (mute) while a value of 1.0 is maximum volume.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="channel_get_pan">
			<return type="float" />
			<argument index="0" name="channel" type="int" />
			<description>
				Returns the panning of the specified channel.
			</description>
		</method>
		<method name="channel_get_pitchrange">
			<return type="float" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the pitch range of a channel.
			</description>
		</method>
		<method name="channel_get_pitchwheel">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the pitch wheel value for the specified channel.
			</description>
		</method>
		<method name="channel_get_preset_bank">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the preset sample bank for the specified channel.
			</description>
		</method>
		<method name="channel_get_preset_index">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the preset index for the specified channel.
			</description>
		</method>
		<method name="channel_get_preset_number">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the preset number for the specified channel.
			</description>
		</method>
		<method name="channel_get_tuning">
			<return type="float" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the tuning of a channel.
			</description>
		</method>
		<method name="channel_get_volume">
			<return type="float" />
			<argument index="0" name="channel" type="int" />
			<description>
				Get the volume of a channel.
			</description>
		</method>
		<method name="channel_midi_control">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="control" type="int" />
			<argument index="2" name="value" type="int" />
			<description>
				MIDI controls are used to produce specialized effects.
			</description>
		</method>
		<method name="channel_note_off">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="note" type="int" />
			<description>
				Stop playing a specific note on a specific channel.
			</description>
		</method>
		<method name="channel_note_off_all">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<description>
				Stop all notes on a channel.
			</description>
		</method>
		<method name="channel_note_on">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="note" type="int" />
			<argument index="2" name="volume" type="float" />
			<description>
				Start playing a note on a specific channel.
			</description>
		</method>
		<method name="channel_set_bank">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="bank" type="int" />
			<description>
				Defines the bank number for the specified channel. Bank is a collection of sound samples.
			</description>
		</method>
		<method name="channel_set_bank_preset">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="bank" type="int" />
			<argument index="2" name="preset" type="int" />
			<description>
				Defines the bank and preset for a channel.
			</description>
		</method>
		<method name="channel_set_pan">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="pan" type="float" />
			<description>
				Defines left and right panning of a channel.
			</description>
		</method>
		<method name="channel_set_pitchrange">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="pitchrange" type="float" />
			<description>
				The the pitch range  for a channel.
			</description>
		</method>
		<method name="channel_set_pitchwheel">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="pitchwheel" type="int" />
			<description>
				Set the pitch wheel value for a channel.
			</description>
		</method>
		<method name="channel_set_preset_index">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="preset_index" type="int" />
			<description>
				Set the preset index for a channel.
			</description>
		</method>
		<method name="channel_set_preset_number">
			<return type="int" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="preset_number" type="int" />
			<argument index="2" name="drums" type="int" />
			<description>
				Set the preset number of a channel. Drums is usually preset 10.
			</description>
		</method>
		<method name="channel_set_tuning">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="tuning" type="float" />
			<description>
				Set the tuning of a channel. Tuning is a float value between -1.0 and 1.0.
			</description>
		</method>
		<method name="channel_set_volume">
			<return type="void" />
			<argument index="0" name="channel" type="int" />
			<argument index="1" name="volume" type="float" />
			<description>
				Set volume of a channel.
			</description>
		</method>
		<method name="set_midi">
			<return type="void" />
			<argument index="0" name="midi_resource" type="String" />
			<description>
				Sets the midi file to a MidiFile resource. Must be the appropriate format to work. 
			</description>
		</method>
		<method name="get_midi" qualifiers="const">
			<return type="String" />
			<description>
				Return the MidiFile song resource currently loaded.
			</description>
		</method>
		<method name="get_preset_names" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Returns a list of preset names stored in the SoundFont.
			</description>
		</method>
		<method name="set_soundfont">
			<return type="void" />
			<argument index="0" name="soundfont_resource" type="String" />
			<description>
				Sets the soundfont to a MidiFile SoundFont resource. It must be the correct format.
			</description>
		</method>
		<method name="get_soundfont" qualifiers="const">
			<return type="String" />
			<description>
				Returns the MidiFile soundfont resource currently loaded.
			</description>
		</method>
		<method name="load_midi">
			<return type="void" />
			<argument index="0" name="midi_file" type="String" />
			<description>
				Loads a MIDI file. It must be a .mid or .midi file and the correct format.
				[b]Note:[/b] A SoundFont file and a playback stream must exist in order for the file to actually play.
			</description>
		</method>
		<method name="load_soundfont">
			<return type="void" />
			<argument index="0" name="soundfont_file" type="String" />
			<description>
				Loads a SoundFont 2 file. It must be an .sf2 file.
			</description>
		</method>
		<method name="note_off">
			<return type="void" />
			<argument index="0" name="preset" type="int" />
			<argument index="1" name="note" type="int" />
			<description>
				Stop playing a specific note.
			</description>
		</method>
		<method name="note_off_all">
			<return type="void" />
			<description>
				Stop playing all notes.
			</description>
		</method>
		<method name="note_on">
			<return type="void" />
			<argument index="0" name="preset" type="int" />
			<argument index="1" name="note" type="int" />
			<argument index="2" name="volume" type="float" />
			<description>
				Start playing a single note.
			</description>
		</method>
	</methods>
	<members>
		<member name="looping" type="bool" setter="set_looping" getter="get_looping" default="true">
			When set to [code]true[/code], midi file will loop forever.
		</member>
		<member name="midi" type="MidiFile" setter="set_midi" getter="get_midi">
			This is the [MidiFile] resource that contains the SoundFont data.
		</member>
		<member name="midi_speed" type="float" setter="set_midi_speed" getter="get_midi_speed" default="1.0">
			Controls the midi file playback speed.
		</member>
		<member name="soundfont" type="MidiFile" setter="set_soundfont" getter="get_soundfont">
			This is the [MidiFile] resource that contains the midi song data.
		</member>
	</members>
	<signals>
		<signal name="loop_finished">
			<description>
				Emitted when the MIDI song finishes playing one single loop. This signal is emitted only if looping is [code]true[/code].
				[b]Note[/b]: When not looping, a [code]finished[/code] signal is emitted and the MidiPlayer will automatically stop itself when reaching the end of the song.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
