<?xml version="1.0" encoding="UTF-8" ?>
<class name="ImageFrames" inherits="Resource" version="3.5">
	<brief_description>
		A container for [Image] frames.
	</brief_description>
	<description>
		A class used to load and arrange a sequence of image frames. Allows to load animated image formats externally (only GIF is supported currently). Each frame can specify a delay for animated images. The data can then be used to generate an [AnimatedTexture] or a [SpriteFrames] via script.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_frame">
			<return type="void" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="delay" type="float" default="-1" />
			<description>
				Adds a new frame.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Removes all frames.
			</description>
		</method>
		<method name="get_bounding_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Returns the bounding rectangle which encloses all added images starting from position [code]Vector2(0, 0)[/code].
			</description>
		</method>
		<method name="get_frame_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the total number of frames.
			</description>
		</method>
		<method name="get_frame_delay" qualifiers="const">
			<return type="float" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the delay of frame [code]idx[/code].
			</description>
		</method>
		<method name="get_frame_image" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the [Image] of frame [code]idx[/code].
			</description>
		</method>
		<method name="load">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="max_frames" type="int" default="0" />
			<description>
				Loads the data from a file located at [code]path[/code]. Recognizes the following file extensions: [code]gif[/code]. The [code]max_frames[/code] parameter limits the number of frames which can be loaded.
			</description>
		</method>
		<method name="load_gif_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="data" type="PoolByteArray" />
			<argument index="1" name="max_frames" type="int" default="0" />
			<description>
				Loads the data from a [PoolByteArray] GIF buffer. The [code]max_frames[/code] parameter limits the number of frames which can be loaded.
			</description>
		</method>
		<method name="remove_frame">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Removes the frame [code]idx[/code].
			</description>
		</method>
		<method name="save_gif">
			<return type="int" enum="Error" />
			<argument index="0" name="filepath" type="String" />
			<argument index="1" name="color_count" type="int" default="256" />
			<description>
				Saves a GIF file using frames added with [method add_frame]. If there are multiple images, creates an animated GIF, taking into account individual frame delays. If there's only one image, GIF is written as a static image.
				The [code]color_count[/code] parameter specifies the number of colors in GIF color map. The number of colors are rounded to nearest power of two, and the maximum number of colors is [code]256[/code].
				Frames can have different sizes. Dimensions of the first frame is taken as the base canvas size.
				Note that GIF animation timing is measured in hundredths of a second, and delay values below [code]0.02[/code] may fallback to [code]1.0[/code] second when rendered on screen, which depends on application displaying such a GIF.
				This method depends on [ImageIndexed] used to generate image palette required to write GIF files. By default, indexed images will be created from all images in [ImageFrames]. If [ImageFrames] already contains [ImageIndexed], then you must ensure that [ImageIndexed] has color palette already generated with [method ImageIndexed.generate_palette] prior to calling this method.
				Saving animated image as transparent is also supported, given all frames are provided in [constant Image.FORMAT_RGBA8] format, but note that transparency is not consistently supported across GIF decoders.
			</description>
		</method>
		<method name="set_frame_delay">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="delay" type="float" />
			<description>
				Sets the delay in seconds of frame [code]idx[/code].
			</description>
		</method>
		<method name="set_frame_image">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="image" type="Image" />
			<description>
				Sets the [Image] of frame [code]idx[/code].
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
